---
import Photo from "../components/Photo.astro";
import Icon from "../components/Icon.astro";
import facephoto from "../assets/photo.jpg";
import TechGrid from "../components/TechGrid.astro";
import PresentationCard from "../components/PresentationCard.astro";
import ProjectCard from "../components/ProjectCard.astro";
import ProjectGrid from "../components/ProjectGrid.astro";
import CarouselItem from "../components/CarouselItem.astro";
import Carousel from "../components/Carousel.astro";
import SkillProgress from "../components/SkillProgress.astro";
import Layout from "../layouts/Layout.astro";
import { BASE_PATH } from "../../astro.config.mjs";

// Import images for TechGrid
import javaIcon from "../assets/icons/java-svgrepo-com.svg";
import jsIcon from "../assets/icons/js-svgrepo-com.svg";
import kotlinIcon from "../assets/icons/kotlin-svgrepo-com.svg";
import rustIcon from "../assets/icons/rust-svgrepo-com.svg";
import pythonIcon from "../assets/icons/python-svgrepo-com.svg";
import bootstrapIcon from "../assets/icons/bootstrap-4-logo-svgrepo-com.svg";
import astroIcon from "../assets/icons/astro-svgrepo-com.svg";
import gitIcon from "../assets/icons/git-svgrepo-com.svg";
import postmanIcon from "../assets/icons/postman-icon-svgrepo-com.svg";
import linuxIcon from "../assets/icons/linux-svgrepo-com.svg";
import sqlIcon from "../assets/icons/sql-database-generic-svgrepo-com.svg";

// Import images for Carousel
import chip8Image from "../assets/images/chip8image.png";
import pokeapiImage from "../assets/images/pokeapi.png";
import vonneumanImage from "../assets/images/vonneuman.png";
import guidebookImage from "../assets/images/guidebook.png";
import stanleyImage from "../assets/images/stanley.png";
import paperworkImage from "../assets/images/paperwork.png";
import parkourImage from "../assets/images/parkour.png";

//
import renderer3dImage from "../assets/images/renderer3d.png";
---

<Layout>
    <!-- Section 1: Presentation -->
    <main id="section1" class="slice">
        <Photo src={facephoto} />

        <div class="section-content">
            <div style="display: flex; width: 100%; justify-content: center;">
                <PresentationCard />
            </div>
            <section id="tech-stack">
                <TechGrid
                    title="Languages"
                    skills={[
                        { icon: javaIcon, progress: 70, title: "Java" },
                        { icon: jsIcon, progress: 70, title: "Javascript" },
                        { icon: kotlinIcon, progress: 70, title: "Kotlin" },
                        { icon: rustIcon, progress: 55, title: "Rust" },
                        { icon: pythonIcon, progress: 50, title: "Python" },
                    ]}
                />
                <TechGrid
                    title="Frameworks & Libraries"
                    skills={[
                        {
                            icon: bootstrapIcon,
                            progress: 100,
                            title: "Bootstrap",
                        },
                        { icon: astroIcon, progress: 55, title: "Astro" },
                    ]}
                />
                <TechGrid
                    title="Tools"
                    skills={[
                        { icon: gitIcon, progress: 100, title: "Git" },
                        { icon: postmanIcon, progress: 100, title: "Postman" },
                    ]}
                />
                <TechGrid
                    title="Other"
                    skills={[
                        { icon: linuxIcon, progress: 65, title: "Linux" },
                        { icon: sqlIcon, progress: 100, title: "SQL Database" },
                    ]}
                />
            </section>
        </div>
    </main>

    <!-- Section 2: Featured Projects -->
    <div id="section2" class="slice">
        <div class="section-content">
            <h2>Featured Projects</h2>
            <ProjectGrid
                projects={[
                    {
                        title: "Rlox lang",
                        description: "I developed a programming language...",
                        link: "https://github.com/Garkatron/Rust-Lox-Interpreter",
                        //image: "https://db0dce98.delivery.rocketcdn.me/es/files/2024/08/Programacion_Procedural_DataScientest-1024x601.png",
                    },
                    {
                        title: "3D Rasterizer in Rust",
                        description: "I developed a 3D rendering engine...",
                        link: "https://github.com/Garkatron/ScrapRenderer",
                        image: renderer3dImage,
                    },
                    {
                        title: "Rust-Coded LRU",
                        description: "I implemented an LRU Cache in Rust...",
                        link: "https://github.com/Garkatron/LRU-Cache-Rust",
                        /// image: "https://blog.orange.es/wp-content/uploads/sites/4/2023/04/memoria-cache-07.jpg",
                    },
                ]}
            />
        </div>
    </div>

    <!-- Section 3: Other Projects and Knowledge -->
    <div id="section3" class="slice">
        <div class="section-content">
            <section>
                <section>
                    <h2>Other Projects</h2>
                    <Carousel
                        items={[
                            {
                                title: "CHIP-8 Emulator",
                                href: "https://github.com/Garkatron/Von-Neumann-Simulator",
                                image: chip8Image,
                                description:
                                    "CHIP-8 Emulator implemented in Python",
                            },
                            {
                                title: "TerraX69",
                                href: "https://github.com/Garkatron/TerraX69-JS",
                                description: "JavaScript game built with Tauri",
                            },
                            {
                                title: "PC Pokémon Web",
                                href: "https://garkatron.github.io/PC-PokeApi/",
                                image: pokeapiImage,
                                description:
                                    "An interactive web app for exploring Pokémon data using the PokéAPI",
                            },
                            {
                                title: "Von Neumann Simulator",
                                href: "https://github.com/Garkatron/Von-Neumann-Simulator",
                                image: vonneumanImage,
                                description:
                                    "Von Neumann architecture simulator in Python",
                            },
                            {
                                title: "IWantToLearnX",
                                href: "https://github.com/Garkatron/IWantToLearnX",
                                description:
                                    "A personal 'Build Your Own X' project to explore and learn various programming concepts",
                            },
                            {
                                title: "FactBoard NEM",
                                href: "https://github.com/Garkatron/FactBoard_NEM",
                                description:
                                    "A Node.js and MongoDB-based app for managing and sharing publications",
                            },
                            {
                                title: "FactBoard",
                                href: "https://github.com/Garkatron/FactBoard",
                                description:
                                    "A PHP and MySQL-based app for managing and sharing publications",
                            },
                        ]}
                    />
                </section>

                <section>
                    <h2>Minecraft Mods</h2>
                    <Carousel
                        items={[
                            {
                                title: "BTA PainScale",
                                href: "https://github.com/Garkatron/BTA-PainScale",
                                description:
                                    "A Minecraft mod with a dynamic difficulty system, enhanced health mechanics, and tougher enemies",
                            },
                            {
                                title: "BTA Guidebook",
                                href: "https://github.com/Garkatron/BTA-Guidebook.md",
                                image: guidebookImage,
                                description:
                                    "A Markdown-based guidebook library for BTA modders with in-game editing and export features",
                            },
                            {
                                title: "StanleyTemperature",
                                href: "https://github.com/Garkatron/StanleyTemperature",
                                image: stanleyImage,
                                description:
                                    "A temperature mod and skill system library for RPG-style gameplay in Minecraft",
                            },
                            {
                                title: "BTA Paperwork",
                                href: "https://github.com/Garkatron/BTA-Paperwork",
                                image: paperworkImage,
                                description:
                                    "A Minecraft mod adding decorative blocks, items, and paper-based entities like cardboard boxes",
                            },
                            {
                                title: "BTA POVERH",
                                href: "https://github.com/Garkatron/BTA-POVERH",
                                image: parkourImage,
                                description:
                                    "A Minecraft mod introducing stamina and parkour mechanics for enhanced movement",
                            },
                        ]}
                    />
                </section>
            </section>
        </div>
    </div>

    <style>
        #tech-stack {
            width: 100%;
        }

        .section-content {
            width: 100%;
            border-radius: 8px;
            padding: 2rem;
            background: transparent;
            position: relative;
            z-index: 2;
        }

        .slice {
            min-height: 100vh;
            position: relative;
            z-index: 2;
            display: flex;
        }

        @media (max-width: 768px) {
            .slice {
                padding: 1rem 0;
                min-height: auto;
            }
        }

        @media (max-width: 480px) {
            .slice {
                padding: 0.5rem 0;
            }
        }

        body {
            background-color: #1b1b1b;
            background-image: url("/Portfolio/bg/olas10.svg");
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            position: relative;
        }

        body::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url("/Portfolio/bg/topography.svg");
            background-repeat: repeat;
            background-size: 1000px;
            opacity: 0.25;
            z-index: -1;
            pointer-events: none;
        }

        html {
            background-color: transparent;
        }

        main {
            background: transparent;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            width: 100%;
            min-height: 100vh;
            position: relative;
            z-index: 2;
        }

        .left-info {
            width: 30%;
            flex-shrink: 0;
        }

        .right-info section h2 {
            color: #fff;
            margin-bottom: 0.5rem;
        }

        .right-info section h5 {
            color: #ccc;
            margin-bottom: 1rem;
        }

        .right-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 2rem;
            box-sizing: border-box;
            align-items: center;
            border-left: 2px solid white;
            background-color: rgba(1, 4, 8, 0.379);
            position: relative;
            z-index: 2;
        }

        .right-info > section {
            width: 99%;
        }

        a {
            display: inline-block;
            outline: 0;
            text-align: center;
            cursor: pointer;
            min-width: 80px;
            height: 32px;
            color: rgb(255, 255, 255);
        }

        .project-section {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .footer {
            width: 100%;
            text-align: center;
            padding: 1rem 0;
            background-color: rgba(1, 4, 8, 0.379);
            color: #fff;
            position: relative;
            z-index: 2;
            bottom: 0;
        }

        .footer p {
            margin: 0;
            font-size: 0.9rem;
        }

        @media (max-width: 900px) {
            main {
                flex-direction: column;
            }
            .left-info {
                width: 100%;
            }
            .right-info {
                width: 100%;
                border-left: none;
            }
        }
    </style>

    <script is:inline>
        document.addEventListener("DOMContentLoaded", () => {
            // Handle anchor link clicks
            document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
                anchor.addEventListener("click", function (e) {
                    e.preventDefault();
                    const targetId = this.getAttribute("href");
                    const targetElement = document.querySelector(targetId);
                    if (targetElement) {
                        targetElement.scrollIntoView({
                            behavior: "smooth",
                            block: "start",
                        });
                    }
                });
            });

            let isScrolling = false;

            // Handle mouse wheel scrolling
            window.addEventListener(
                "wheel",
                (e) => {
                    e.preventDefault();
                    if (isScrolling) return;
                    isScrolling = true;

                    // Reset scrolling lock after a delay
                    setTimeout(() => {
                        isScrolling = false;
                    }, 500); // Increased to 500ms for smoother transitions

                    const sections = document.querySelectorAll(".slice");
                    if (sections.length === 0) {
                        console.warn("No elements found with class .slice");
                        return;
                    }

                    // Find the current section based on visibility
                    let currentSection = 0;
                    let minDistance = Infinity;

                    sections.forEach((section, index) => {
                        const rect = section.getBoundingClientRect();
                        const distance = Math.abs(rect.top); // Distance from top of viewport
                        if (distance < minDistance) {
                            minDistance = distance;
                            currentSection = index;
                        }
                    });

                    // Determine next or previous section based on scroll direction
                    if (e.deltaY > 0) {
                        // Scroll down
                        currentSection = Math.min(
                            currentSection + 1,
                            sections.length - 1,
                        );
                    } else {
                        // Scroll up
                        currentSection = Math.max(currentSection - 1, 0);
                    }

                    sections[currentSection].scrollIntoView({
                        behavior: "smooth",
                        block: "start",
                    });
                },
                { passive: false },
            );

            // Handle keyboard navigation
            window.addEventListener(
                "keydown",
                (e) => {
                    const sections = document.querySelectorAll(".slice");
                    if (sections.length === 0) return;

                    let currentSection = 0;
                    let minDistance = Infinity;

                    sections.forEach((section, index) => {
                        const rect = section.getBoundingClientRect();
                        const distance = Math.abs(rect.top);
                        if (distance < minDistance) {
                            minDistance = distance;
                            currentSection = index;
                        }
                    });

                    let targetSection = currentSection;

                    if (e.code === "ArrowDown" || e.code === "Space") {
                        e.preventDefault();
                        targetSection = Math.min(
                            currentSection + 1,
                            sections.length - 1,
                        );
                    } else if (e.code === "ArrowUp") {
                        e.preventDefault();
                        targetSection = Math.max(currentSection - 1, 0);
                    }

                    if (targetSection !== currentSection) {
                        sections[targetSection].scrollIntoView({
                            behavior: "smooth",
                            block: "start",
                        });
                    }
                },
                { passive: false },
            );
        });
    </script>
</Layout>
